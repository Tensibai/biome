env:
  HAB_LICENSE: "accept-no-persist"
  HAB_STUDIO_SECRET_HAB_LICENSE: "accept-no-persist"
  HAB_BLDR_URL: "https://bldr.habitat.sh"

steps:

  # Set up build metadata
  - label: ":habicat: set build metadata"
    command: .buildkite/scripts/setup_build_metadata.sh
    agents:
      queue: biome-release

  - wait

  # We do this to ensure a clean slate every time, just in case we had
  # a failed release process that left things behind.
  #
  # It also has the nice side effect of getting our biome-release
  # worker queue warmed up
  #
  # It's OK if the release channel doesn't exist at this stage; thus
  # the /bin/true fallback
  - label: ":habicat: :boom: Destroy release channel"
    command: .buildkite/scripts/destroy_release_channel.sh || /bin/true
    agents:
      queue: biome-release

  - wait

  - label: ":linux: :habicat: biome/bio-launcher"
    command: .buildkite/scripts/build_component.sh launcher
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":linux: :two: :habicat: biome/bio-launcher"
    command: .buildkite/scripts/build_component.sh launcher
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux-kernel2"

  - label: ":windows: :habicat: biome/bio-launcher"
    command: .buildkite/scripts/build_component.ps1 -Component launcher
    agents:
      queue: default-windows-2016-privileged
    env:
      HAB_BLDR_CHANNEL: unstable
    plugins:
      - docker#v2.0.0:
          image: "chefes/windows-base:latest"
          shell: [ "powershell", "-Command" ]
          environment:
            - HAB_BLDR_CHANNEL
            - HAB_AUTH_TOKEN
            - HAB_CRYPTO_KEY
            - HAB_LICENSE
            - BUILDKITE_JOB_ID
            - BUILDKITE_AGENT_ACCESS_TOKEN
    timeout_in_minutes: 20

  - wait

  # Note that the Windows service can be safely built in parallel with
  # our bio packages.
  - label: ":windows: Build windows service"
    command: .buildkite/scripts/build_component.ps1 -Component windows-service
    agents:
      queue: default-windows-2016-privileged
    env:
      HAB_BLDR_CHANNEL: unstable
    plugins:
      - docker#v2.0.0:
          image: "chefes/windows-base:latest"
          shell: [ "powershell", "-Command" ]
          environment:
            - HAB_BLDR_CHANNEL
            - HAB_AUTH_TOKEN
            - HAB_LICENSE
            - BUILDKITE_JOB_ID
            - BUILDKITE_AGENT_ACCESS_TOKEN

  - label: ":linux: :habicat: biome/bio"
    command: .buildkite/scripts/build_component.sh bio
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":linux: :two: :habicat: biome/bio"
    command: .buildkite/scripts/build_component.sh bio
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux-kernel2"

  - label: ":windows: :habicat: biome/bio"
    command: .buildkite/scripts/build_component.ps1 -Component bio
    agents:
      queue: default-windows-2016-privileged
    env:
      HAB_BLDR_CHANNEL: unstable
    plugins:
      - docker#v2.0.0:
          image: "chefes/windows-base:latest"
          shell: [ "powershell", "-Command" ]
          environment:
            - HAB_BLDR_CHANNEL
            - HAB_AUTH_TOKEN
            - HAB_CRYPTO_KEY
            - HAB_LICENSE
            - BUILDKITE_JOB_ID
            - BUILDKITE_AGENT_ACCESS_TOKEN
    timeout_in_minutes: 30

  - label: ":mac: :habicat: biome/bio"
    command:
      - .buildkite/scripts/build_mac_release.sh
    agents:
      queue: default-macos-privileged
    plugins:
      - chef/anka#v0.5.2:
          vm-name: macos-base-10.12
          inherit-environment-vars: true
          wait-network: true
    timeout_in_minutes: 30

  - wait

  - label: ":linux: :habicat: :hammer_and_wrench: biome/bio-plan-build"
    command: .buildkite/scripts/build_component.sh plan-build
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":linux: :two: :habicat: :hammer_and_wrench: biome/bio-plan-build"
    command: .buildkite/scripts/build_component.sh plan-build
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux-kernel2"


  - label: ":windows: :habicat: :hammer_and_wrench: biome/bio-plan-build-ps1"
    command: .buildkite/scripts/build_component.ps1 -Component plan-build-ps1
    agents:
      queue: default-windows-2016-privileged
    env:
      HAB_BLDR_CHANNEL: unstable
    plugins:
      - docker#v2.0.0:
          image: "chefes/windows-base:latest"
          shell: [ "powershell", "-Command" ]
          environment:
            - HAB_BLDR_CHANNEL
            - HAB_AUTH_TOKEN
            - HAB_LICENSE
            - BUILDKITE_JOB_ID
            - BUILDKITE_AGENT_ACCESS_TOKEN

  # This must pull in the biome/bio we built ^^^
  - label: ":linux: :habicat: biome/bio-bintray-publish"
    command: .buildkite/scripts/build_component.sh bintray-publish
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":linux: :two: :habicat: biome/bio-bintray-publish"
    command: .buildkite/scripts/build_component.sh bintray-publish
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux-kernel2"

  - wait

  # This must pull in the core/backline we built ^^^
  - label: ":drum_with_drumsticks: :habicat: :drum_with_drumsticks: biome/bio-backline"
    command: .buildkite/scripts/build_component.sh backline
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":drum_with_drumsticks: :habicat: :two: :drum_with_drumsticks: biome/bio-backline"
    command: .buildkite/scripts/build_component.sh backline
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux-kernel2"

  - wait

  # TODO: This only depends on biome/bio, so it could theoretically be built alongside plan-build and backline
  - label: ":linux: :habicat: biome/bio-studio"
    command: .buildkite/scripts/build_component.sh studio
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":linux: :two: :habicat: biome/bio-studio"
    command: .buildkite/scripts/build_component.sh studio
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux-kernel2"

  - label: ":windows: :habicat: biome/bio-studio"
    command: .buildkite/scripts/build_component.ps1 -Component studio
    agents:
      queue: default-windows-2016-privileged
    env:
      HAB_BLDR_CHANNEL: unstable
    plugins:
      - docker#v2.0.0:
          image: "chefes/windows-base:latest"
          shell: [ "powershell", "-Command" ]
          environment:
            - HAB_BLDR_CHANNEL
            - HAB_AUTH_TOKEN
            - HAB_LICENSE
            - BUILDKITE_JOB_ID
            - BUILDKITE_AGENT_ACCESS_TOKEN

  - wait

  - label: ":linux: :habicat: biome/bio-sup"
    command: .buildkite/scripts/build_component.sh sup
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":linux: :two: :habicat: biome/bio-sup"
    command: .buildkite/scripts/build_component.sh sup
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux-kernel2"

  - label: ":windows: :habicat: biome/bio-sup"
    command: .buildkite/scripts/build_component.ps1 -Component sup
    agents:
      queue: default-windows-2016-privileged
    env:
      HAB_BLDR_CHANNEL: unstable
    plugins:
      - docker#v2.0.0:
          image: "chefes/windows-base:latest"
          shell: [ "powershell", "-Command" ]
          environment:
            - HAB_BLDR_CHANNEL
            - HAB_AUTH_TOKEN
            - HAB_LICENSE
            - BUILDKITE_JOB_ID
            - BUILDKITE_AGENT_ACCESS_TOKEN

  - wait
  # Exporters

  # TODO: Create an ACI emoji
  - label: ":habicat: biome/bio-pkg-aci"
    command: .buildkite/scripts/build_component.sh pkg-aci
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":linux: :docker: biome/bio-pkg-export-docker"
    command: .buildkite/scripts/build_component.sh pkg-export-docker
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":windows: :docker: biome/bio-pkg-export-docker"
    command: .buildkite/scripts/build_component.ps1 -Component pkg-export-docker
    agents:
      queue: default-windows-2016-privileged
    env:
      HAB_BLDR_CHANNEL: unstable
      BUILD_PKG_TARGET: "x86_64-windows"
    plugins:
      - docker#v2.0.0:
          image: "chefes/windows-base:latest"
          shell: [ "powershell", "-Command" ]
          environment:
            - HAB_BLDR_CHANNEL
            - HAB_AUTH_TOKEN
            - HAB_LICENSE
            - BUILDKITE_JOB_ID
            - BUILDKITE_AGENT_ACCESS_TOKEN


  - label: ":k8s: biome/bio-pkg-export-kubernetes"
    command: .buildkite/scripts/build_component.sh pkg-export-kubernetes
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":helm: biome/bio-pkg-export-helm"
    command: .buildkite/scripts/build_component.sh pkg-export-helm
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":linux: :package: biome/bio-pkg-export-tar"
    command: .buildkite/scripts/build_component.sh pkg-export-tar
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":linux: :two: :package: biome/bio-pkg-export-tar"
    command: .buildkite/scripts/build_component.sh pkg-export-tar
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux-kernel2"

  - label: ":windows: :package: biome/bio-pkg-export-tar"
    command: .buildkite/scripts/build_component.ps1 -Component pkg-export-tar
    agents:
      queue: default-windows-2016-privileged
    env:
      HAB_BLDR_CHANNEL: unstable
      BUILD_PKG_TARGET: "x86_64-windows"
    plugins:
      - docker#v2.0.0:
          image: "chefes/windows-base:latest"
          shell: [ "powershell", "-Command" ]
          environment:
            - HAB_BLDR_CHANNEL
            - HAB_AUTH_TOKEN
            - HAB_LICENSE
            - BUILDKITE_JOB_ID
            - BUILDKITE_AGENT_ACCESS_TOKEN

  # TODO: Create a Mesos emoji
  - label: ":habicat: biome/bio-pkg-mesosize"
    command: .buildkite/scripts/build_component.sh pkg-mesosize
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - wait

  # The cfize export currently has a dependency on
  # bio-pkg-export-docker, so it must be built after that.
  - label: ":cloudfoundry: biome/bio-pkg-cfize"
    command: .buildkite/scripts/build_component.sh pkg-cfize
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - wait

  - label: ":docker: Upload containers to Docker Hub"
    command: .buildkite/scripts/dockerhub_upload.sh
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"
  - label: ":docker: :two: Upload containers to Docker Hub"
    command: .buildkite/scripts/dockerhub_upload.sh
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux-kernel2"

  - label: ":docker: :windows: Upload windows 2016 container to Docker Hub"
    command: .buildkite/scripts/publish_docker_studio.ps1
    expeditor:
      executor:
        windows:
          os_version: 2016

  - label: ":docker: :windows: Upload windows 2019 container to Docker Hub"
    command: .buildkite/scripts/publish_docker_studio.ps1
    expeditor:
      executor:
        windows:
          os_version: 2019

  # TODO Create a JFrog emoji
  - label: ":linux: Upload (but don't publish!) artifacts to Bintray"
    command: .buildkite/scripts/bintray_upload.sh
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - label: ":linux: :two: Upload (but don't publish!) artifacts to Bintray"
    command: .buildkite/scripts/bintray_upload.sh
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux-kernel2"

  - label: ":windows: Upload (but don't publish!) artifacts to Bintray"
    command: .buildkite/scripts/bintray_upload.sh
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-windows"

  - label: ":mac: Upload (but don't publish!) artifacts to Bintray"
    command: .buildkite/scripts/bintray_upload_macos.sh
    agents:
      queue: biome-release
      # NOTE: We don't need to run this on a Mac.

  - label: ":right-facing_fist: :boom: :left-facing_fist: Promote Release to builder-acceptance"
    command: .buildkite/scripts/promote_release_channel.sh builder-acceptance
    agents:
      queue: biome-release
    env:
      BUILD_PKG_TARGET: "x86_64-linux"

  - block: ":white_check_mark: Validate the Release Candidate"
    prompt: |
      Until we beef up our automated acceptance testing, we need to do
      some basic manual validation of the release candidates. Invite
      your friends; it will be so much fun!

  - block: ":shipit: :question:"
    prompt: "Is it good to release, or do we need to go back to the drawing board?"
    fields:
      - select: "Action"
        required: true
        key: "release-action"
        options:
          - label: "Release"
            value: "release"
          - label: "Abort"
            value: "abort"

  - label: ":pipeline:"
    command: .buildkite/scripts/finish_release.sh
    agents:
      queue: default-privileged
